# ===== Zim 관련 설정 start =====
ZIM_CONFIG_FILE=~/.config/zsh/zimrc
ZIM_HOME=~/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
      https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi

# Install missing modules and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZIM_CONFIG_FILE:-${ZDOTDIR:-${HOME}}/.zimrc} ]]; then
  source ${ZIM_HOME}/zimfw.zsh init
fi

# Initialize modules.
source ${ZIM_HOME}/init.zsh

# Atuin과 zsh-vi-mode 키 바인딩 충돌 해결
function load_atuin_binding() {
  eval . "$HOME/.atuin/bin/env"
  eval "$(atuin init zsh)"

  # zsh vi 명령 모드 (vicmd) 때도 입력 모드 (viins) 처럼 ctrl + r 로 atuin 검색 실행
  bindkey -M vicmd '^r' atuin-search
}
zvm_after_init_commands+=(load_atuin_binding)
# ===== Zim 관련 설정 end =====

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
setopt hist_verify

eval "$(/opt/homebrew/bin/brew shellenv)"

export LESSCHARSET=UTF-8
export LC_ALL=en_US.UTF-8

export XDG_CONFIG_HOME="$HOME/.config"

export EDITOR=/opt/homebrew/bin/nvim
alias vi="nvim"
alias ls='logo-ls'
alias lk="walk"
alias lg='lazygit'

# ---- FZF -----

# Set up fzf key bindings and fuzzy completion
eval "$(fzf --zsh)"

# --- setup fzf theme ---
fg="#CBE0F0"
bg="#011628"
bg_highlight="#143652"
purple="#B388FF"
blue="#06BCE4"
cyan="#2CF9ED"

export FZF_DEFAULT_OPTS="--color=fg:${fg},bg:${bg},hl:${purple},fg+:${fg},bg+:${bg_highlight},hl+:${purple},info:${blue},prompt:${cyan},pointer:${cyan},marker:${cyan},spinner:${cyan},header:${cyan}"

# -- Use fd instead of fzf --

export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git --no-ignore"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git --no-ignore"

# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

source ~/Tools/fzf-git.sh/fzf-git.sh

show_file_or_dir_preview="if [ -d {} ]; then eza --tree --color=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi"

export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

# Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo \${}'"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview "$show_file_or_dir_preview" "$@" ;;
  esac
}

# ----- FD (better find) -----
alias fd="fd --no-ignore"

# ----- Bat (better cat) -----

export BAT_THEME=gruvbox-dark

# ---- Eza (better ls) -----

alias ls="eza --icons=always"
alias la="ls -a"
#
# ---- TheFuck -----

# thefuck alias
eval $(thefuck --alias)
eval $(thefuck --alias fk)

# ---- Zoxide (better cd) ----
eval "$(zoxide init zsh)"

alias cd="z"

# ---- Yazi ----
function yy() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# ---- RG (Ripgrep) ----
alias rg="rg -S"

# ---- Flutter run ----
function flutter-run() {
  tmux send-keys "fvm flutter pub get;dart run build_runner build --delete-conflicting-outputs;fvm flutter run -d macos $1 $2 $3 $4 --pid-file=/tmp/tf1.pid | tee flutter.log" Enter \;
}

# ---- Flutter watch ----
# https://github.com/RobertBrunhage/.dotfiles/blob/main/zsh/.zshrc
# 현재 폴더 lib 아래의 dart 파일들 감시하여 hot reload 지원
function flutter-watch() {
  # tmux send-keys "flutter run $1 $2 $3 $4 --pid-file=/tmp/tf1.pid" Enter \;\
  # split-window -v \;\
  tmux send-keys 'npx -y nodemon -e dart -w lib -x "cat /tmp/tf1.pid | xargs kill -s USR1"' Enter \;
  # resize-pane -y 5 -t 1 \;\
  # select-pane -t 0 \;
}

## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /Users/casper/.config/.dart-cli-completion/zsh-config.zsh ]] && . /Users/casper/.config/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]

# Directory aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# 업무용 환경변수
if [ -f ~/.zsh_profile_work ]; then
  . ~/.zsh_profile_work
fi

# 개인용 환경변수
if [ -f ~/.zsh_profile_personal ]; then
  . ~/.zsh_profile_personal
fi

